xy$class %>% summary
xy %>% dim
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE)
fit <- train(
x = xy %>% select(-class) %>% as.matrix,
y = xy$class,
tuneLength = 1,
method = 'xgbTree',
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
fit$train
fit$results %>% arrange(-ROC) %>% head
varImp(fit, scale = TRUE)
fit$modelId <- modelId
fit$dataId <- dataId
# fit$data <- xy
fit$predict <- predict(fit, newdata = xy %>% select(-class) %>% as.matrix, type = 'prob')
pROC_obj <- roc(xy$class, fit$predict$below50, ci = TRUE)
pROC_obj
plot(pROC_obj)
saveRDS(fit, file = model1.RData)
saveRDS(fit, file = 'model1.RData')
# fit$data <- xy
fit$predict <- predict(fit, newdata = testDataClean %>% select(-class) %>% as.matrix, type = 'prob')
testDataClean <- testDataRaw %>% customPreprocess2
# fit$data <- xy
fit$predict <- predict(fit, newdata = testDataClean %>% select(-class) %>% as.matrix, type = 'prob')
# fit$data <- xy
fit$predict <- predict(fit, newdata = trainDataClean %>% select(-class) %>% as.matrix, type = 'prob')
pROC_obj <- roc(xy$class, fit$predict$below50, ci = TRUE)
pROC_obj
plot(pROC_obj)
testDataClean <- testDataRaw %>% customPreprocess2
trainDataClean <- trainDataRaw %>% customPreprocess2
testDataRaw <- read.csv(file = testFile) %>% as.tibble
# Clean data
## Keep only numerics
customPreprocess1 <- function(trainDataRaw) {
numData <- trainDataRaw %>%
mutate(over50k = as.numeric(X..50000.)-1) %>%
select(-'X..50000.') %>%
select_if(is.numeric) %>%
mutate(class = if_else(as.numeric(over50k)==1, 'over50', 'below50') %>% factor) %>%
select(-over50k) %>%
as.tibble
}
## Convert all non numeric into dummy variables and keep numerics unchanged
customPreprocess2 <- function(trainDataRaw) {
trainDataClean <- trainDataRaw %>%
mutate(class = if_else(as.numeric(X..50000.)==2, 'over50', 'below50') %>% factor) %>%
select(-X..50000.) %>%
as.tibble
dummies <- dummyVars(class ~ ., data = trainDataClean)
trainDataDummies <- predict(dummies, newdata = trainDataClean) %>%
as.tibble
trainDataDummies$class = trainDataClean$class %>% factor
trainDataDummies
}
trainDataClean <- trainDataRaw %>% customPreprocess2
testDataClean <- testDataRaw %>% customPreprocess2
View(testDataClean)
allData = trainDataRaw %>%
mutate(train = 1) %>%
full_join(testDataRaw %>% mutate(train = 0))
allData = trainDataRaw %>%
mutate(train = 1) %>%
rbind(testDataRaw %>% mutate(train = 0))
allData = bind_rows(
trainDataRaw %>% mutate(train = 1),
testDataRaw %>% mutate(train = 0))
View(trainDataRaw)
View(allData)
# Load Files
trainDataRaw <- read.csv(file = trainFile) %>% as.tibble
testDataRaw <- read.csv(file = testFile) %>% as.tibble
colnames(trainDataRaw) == colnames(testDataRaw)
View(trainDataRaw)
View(testDataRaw)
# Load Files
trainDataRaw <- read.csv(file = trainFile, header = FALSE) %>% as.tibble
View(trainDataRaw)
# Load Files
trainDataRaw <- read.csv(file = trainFile, header = FALSE) %>% as.tibble
testDataRaw <- read.csv(file = testFile, header = FALSE) %>% as.tibble
colnames(trainDataRaw) == colnames(testDataRaw)
# Load Files
trainDataRaw <- read.csv(file = trainFile, header = FALSE) %>% as.tibble
testDataRaw <- read.csv(file = testFile, header = FALSE) %>% as.tibble
# Clean data
## Convert all non numeric into dummy variables and keep numerics unchanged
customPreprocess2 <- function(trainDataRaw) {
trainDataClean <- trainDataRaw %>%
mutate(class = if_else(as.numeric(V42)==2, 'over50', 'below50') %>% factor) %>%
select(-V42) %>%
as.tibble
dummies <- dummyVars(class ~ ., data = trainDataClean)
trainDataDummies <- predict(dummies, newdata = trainDataClean) %>%
as.tibble
trainDataDummies$class = trainDataClean$class %>% factor
trainDataDummies
}
allData = bind_rows(
trainDataRaw %>% mutate(train = 1),
testDataRaw %>% mutate(train = 0))
View(allData)
trainDataRaw %>% mutate(train = 1),
testDataRaw %>% mutate(train = 0)) %>%
customPreprocess2
allData = bind_rows(
trainDataRaw %>% mutate(train = 1),
testDataRaw %>% mutate(train = 0)) %>%
customPreprocess2
View(allData)
install.packages("rocc")
library(rocc)
library(mxnet)
library(nnet)
library(tidyverse)
library(dplyr)
library(dbplyr)
library(xgboost)
library(caret)
library(tibble)
library(ggplot2)
library(pROC)
library(earth)
library(keras)
library(nnet)
library(rocc)
# Project metadata
method = 'xgbTree'
method = 'mlpKerasDecayCost'
method = 'pcaNNet'
method = 'rocc'
method
method
source('~/Workplace/R/dataiku/src/explore.R', echo=TRUE)
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
classProbs = TRUE)
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
classProbs = TRUE)
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
classProbs = TRUE)
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
classProbs = TRUE)
method = 'mlpKerasDecayCost'
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
classProbs = TRUE)
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE)
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
Y
?install_tensorflow
install_tensorflow
install_tensorflow()
library(tensorflow)
library(keras)
library(tensorflow)
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE)
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
# method = 'mlpKerasDecayCost'
method = 'pcaNNet'
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE)
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
xytrain$class
?train
library(caret)
library(caret)
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
xytrain$class
xytrain %>% select(-class) %>% as.matrix
## training
fit <- train(
x = xytrain %>% select(-class), # %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
xytrain %>% select(-class) %>% as.matrix
xytrain %>% select(-class) %>% as.matrix %>% colnames
##################################################
# Author: Daniel Durrenberger
# Company: Dataiku
# Object: Test
# Date: 05.03.2020
#
######################################
library(tidyverse)
library(dplyr)
library(dbplyr)
library(xgboost)
library(tibble)
library(ggplot2)
library(pROC)
library(earth)
library(nnet)
library(rocc)
library(caret)
# Project metadata
method = 'xgbTree'
# method = 'mlpKerasDecayCost'
method = 'nnet'
# method = 'rocc'
# Files
trainFile <- "./data/census_income_learn.csv"
testFile <- './data/census_income_test.csv'
# Load Files
trainDataRaw <- read.csv(file = trainFile, header = FALSE) %>% as.tibble
testDataRaw <- read.csv(file = testFile, header = FALSE) %>% as.tibble
trainDataRaw %>% head #See what it looks like
# Clean data
## Convert all non numeric into dummy variables and keep numerics unchanged
customPreprocess2 <- function(trainDataRaw) {
trainDataClean <- trainDataRaw %>%
mutate(class = if_else(as.numeric(V42)==2, 'over50', 'below50') %>% factor) %>%
select(-V42) %>%
as.tibble
dummies <- dummyVars(class ~ ., data = trainDataClean)
trainDataDummies <- predict(dummies, newdata = trainDataClean) %>%
as.tibble
trainDataDummies$class = trainDataClean$class %>% factor
trainDataDummies
}
allData <- bind_rows(
trainDataRaw %>% mutate(train = 1),
testDataRaw %>% mutate(train = 0)) %>%
customPreprocess2
# Remove columns with near zero variance.
nzv <- nearZeroVar(allData)
allData <- allData[,-nzv]
allData %>% head #See result
# Split data
## One half of training set is used to train
xytrain <- allData %>%
filter(train == 1) %>%
select(-train) %>%
group_by(class) %>%
sample_frac(.5) %>%
ungroup
## The other half for calibration
xycal <- allData %>%
filter(train == 1) %>%
select(-train) %>%
anti_join(xytrain) %>%
ungroup
## Test set is left untouched
xytest <- allData %>%
filter(train == 0) %>%
select(-train) %>%
ungroup
## Check class balance
xytrain$class %>% summary
xycal$class %>% summary
xytest$class %>% summary
xytrain %>% dim
# Train Model
## Settings
fitControl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 1,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE)
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 1,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
# Results
## Training performance
fit$results %>% arrange(-ROC) %>% head
## Importance of variables
varImp(fit, scale = TRUE)
# Calibration
calPredict <- predict(fit,
newdata = xycal %>% select(-class) %>% as.matrix,
type = 'prob') %>%
mutate(pred = if_else(below50 > .8, 'below50', 'over50') %>% factor) %>%
mutate(obs = xycal$class %>% factor)
threshold <- 0.7
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(calPredict$obs, calPredict$pred)
pROC_obj_cal <- roc(calPredict$obs, calPredict$below50, ci = TRUE)
pROC_obj_cal
plot(pROC_obj_cal)
confusionMatrix(calPredict$obs, calPredict$pred)
# Calibration
calPredict <- predict(fit,
newdata = xycal %>% select(-class) %>% as.matrix,
type = 'prob') %>%
mutate(pred = if_else(below50 > .8, 'below50', 'over50') %>% factor) %>%
mutate(obs = xycal$class %>% factor)
calPredict
# Calibration
calPredict <- predict(fit,
newdata = xycal %>% select(-class) %>% as.matrix,
type = 'prob') %>%
mutate(pred = if_else(below50 > .5, 'below50', 'over50') %>% factor) %>%
mutate(obs = xycal$class %>% factor)
plot(pROC_obj_cal)
pROC_obj_cal <- roc(calPredict$obs, calPredict$below50, ci = TRUE)
pROC_obj_cal
plot(pROC_obj_cal)
confusionMatrix(calPredict$obs, calPredict$pred)
# Project metadata
method = 'xgbTree'
## training
fit <- train(
x = xytrain %>% select(-class) %>% as.matrix,
y = xytrain$class,
tuneLength = 5,
method = method,
trControl = fitControl,
metric = 'ROC',
verbose = TRUE
)
# Results
## Training performance
fit$results %>% arrange(-ROC) %>% head
## Importance of variables
varImp(fit, scale = TRUE)
# Results
## Training performance
fit$results %>% arrange(-ROC) %>% head
# Calibration
calPredict <- predict(fit,
newdata = xycal %>% select(-class) %>% as.matrix,
type = 'prob') %>%
mutate(pred = if_else(below50 > .5, 'below50', 'over50') %>% factor) %>%
mutate(obs = xycal$class %>% factor)
threshold <- 0.5
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(calPredict$obs, calPredict$pred)
pROC_obj_cal <- roc(calPredict$obs, calPredict$below50, ci = TRUE)
pROC_obj_cal
plot(pROC_obj_cal)
threshold <- 0.8
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(calPredict$obs, calPredict$pred)
pROC_obj_cal <- roc(calPredict$obs, calPredict$below50, ci = TRUE)
threshold <- 0.7
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
threshold <- 0.6
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(calPredict$obs, calPredict$pred)
pROC_obj_cal <- roc(calPredict$obs, calPredict$below50, ci = TRUE)
pROC_obj_cal
plot(pROC_obj_cal)
# Test
testPredict <- predict(fit,
newdata = xytest %>% select(-class) %>% as.matrix,
type = 'prob') %>%
mutate(pred = if_else(below50 > .8, 'below50', 'over50') %>% factor) %>%
mutate(obs = xytest$class %>% factor)
testPredict <- testPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(testPredict$obs, testPredict$pred)
pROC_obj_cal <- roc(testPredict$obs, testPredict$below50, ci = TRUE)
pROC_obj_cal
plot(pROC_obj_cal)
saveRDS(fit, file = 'model_xgboost.RData')
source('~/Workplace/R/dataiku/src/explore.R', echo=TRUE)
saveRDS(fit, file = 'model_nn.RData')
## Save training
saveRDS(fit, file = 'model_nn.RData')
## Importance of variables
varImp(fit, scale = TRUE)
calPredict
threshold <- 0.1
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(calPredict$obs, calPredict$pred)
calPredict
threshold <- 0.8
calPredict <- calPredict %>%
mutate(pred = if_else(below50 > threshold, 'below50', 'over50') %>% factor)
confusionMatrix(calPredict$obs, calPredict$pred)
pROC_obj_cal <- roc(calPredict$obs, calPredict$below50, ci = TRUE)
pROC_obj_cal
plot(pROC_obj_cal)
fit
